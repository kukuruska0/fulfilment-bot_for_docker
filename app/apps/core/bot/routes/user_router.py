from pydoc import html

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import *
from aiogram.utils.formatting import Bold, as_list, Text
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __

from app.apps.core.bot.controllers.address_controller import AddressController
from app.apps.core.bot.controllers.calculation_controller import CalculationController
from app.apps.core.bot.controllers.complaint_controller import ComplaintController
from app.apps.core.bot.controllers.links_controller import LinksController
from app.apps.core.bot.controllers.main_controller import MainController
from app.apps.core.bot.controllers.price_controller import PriceController
from app.apps.core.bot.controllers.product_controller import ProductController
from app.apps.core.bot.controllers.shipment_controller import ShipmentController
from app.apps.core.bot.controllers.spoilage_controller import SpoilageController
from app.apps.core.bot.keyboards.main import start_kb
from app.apps.core.bot.services.router import Router

from app.apps.core.bot.states import GetLanguage
from app.services.i18n_translater import i18n_middleware

router = Router()

# TODO Make for other iogram  events (done only for message action )
router.action_message(MainController, MainController.action_start, Command(commands=["start"]))
router.action_message(CalculationController, CalculationController.show_calculation_message, F.text == 'üìë Calculate')
router.action_message(CalculationController, CalculationController.show_calculation_message, F.text == 'üìë –†–∞—Å—á—ë—Ç')
router.action_message(ProductController, ProductController.show_product_message, F.text == 'üì¶ –ó–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–∞')
router.action_message(ProductController, ProductController.show_product_message, F.text == 'üì¶ Picking up goods')
router.action_message(PriceController, PriceController.show_price_message, F.text == 'üìà –ü—Ä–∞–π—Å')
router.action_message(PriceController, PriceController.show_price_message, F.text == 'üìà Price')
router.action_message(ShipmentController, ShipmentController.show_shipment_message, F.text == 'üöö –û—Ç–≥—Ä—É–∑–∫–∞')
router.action_message(ShipmentController, ShipmentController.show_shipment_message, F.text == 'üöö Shipment')
router.action_message(AddressController, AddressController.show_address_message, F.text == 'üìç –ê–¥—Ä–µ—Å')
router.action_message(AddressController, AddressController.show_address_message, F.text == 'üìç Address')
router.action_message(SpoilageController, SpoilageController.show_spoilage_message, F.text == 'üö´ –ë—Ä–∞–∫')
router.action_message(SpoilageController, SpoilageController.show_spoilage_message, F.text == 'üö´ Spoilage')
router.action_message(ComplaintController, ComplaintController.show_complaint_message, F.text == '‚ùì –†–µ–∫–ª–∞–º–∞—Ü–∏–∏')
router.action_message(ComplaintController, ComplaintController.show_complaint_message, F.text == '‚ùì Complaints')
router.action_message(LinksController, LinksController.show_links, F.text == 'üîó –°—Å—ã–ª–∫–∏')
router.action_message(LinksController, LinksController.show_links, F.text == 'üîó Links')


@router.message(F.text == 'üõ† –¢–µ—Ö –∑–∞–¥–∞–Ω–∏–µ')
async def technical_task(message: Message):
    content = Text(Bold(_('–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —è –ø–æ–º–æ–≥—É –í–∞–º —Å —Ä–∞—Å—á—ë—Ç–æ–º:\nhttps://t.me/EkaterinaLevchenko')))
    await message.answer(**content.as_kwargs())
    await message.answer_document(FSInputFile(path=r'/home/–¢–ó_OZON_–í–ê–®–ê_–§–ê–ú–ò–õ–ò–Ø_–î–ê–¢–ê_–û–¢–ü–†–ê–í–ö–ò_–¢–ó.xlsx'))
    await message.answer_document(FSInputFile(path=r'/home/–¢–ó_–í–ê–®–ê –§–ê–ú–ò–õ–ò–Ø_–î–ê–¢–ê –û–¢–ü–†–ê–í–ö–ò –¢–ó.xlsx'))


@router.message(F.text == 'üõ† Technical task')
async def technical_task(message: Message):
    content = Text(Bold(_('–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —è –ø–æ–º–æ–≥—É –í–∞–º —Å —Ä–∞—Å—á—ë—Ç–æ–º:\nhttps://t.me/EkaterinaLevchenko')))
    await message.answer(**content.as_kwargs())
    await message.answer_document(FSInputFile(path=r'/home/–¢–ó_OZON_–í–ê–®–ê_–§–ê–ú–ò–õ–ò–Ø_–î–ê–¢–ê_–û–¢–ü–†–ê–í–ö–ò_–¢–ó.xlsx'))
    await message.answer_document(FSInputFile(path=r'/home/–¢–ó_–í–ê–®–ê –§–ê–ú–ò–õ–ò–Ø_–î–ê–¢–ê –û–¢–ü–†–ê–í–ö–ò –¢–ó.xlsx'))


@router.message(F.text == 'üìù –î–æ–≥–æ–≤–æ—Ä')
async def agreement(message: Message):
    await message.answer_document(FSInputFile(path=r'/home/Contract_SAXARGROUP.docx'))


@router.message(F.text == 'üìù Contract')
async def agreement(message: Message):
    await message.answer_document(FSInputFile(path=r'/home/Contract_SAXARGROUP.docx'))


@router.callback_query(F.data == 'team_1')
async def team_1(callback: CallbackQuery):
    content = Text(Bold(_('–ö–æ–Ω–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã –°—Ç–∞—Å–∞:\nhttps://t.me/saxargroupFf')))
    await callback.message.answer(**content.as_kwargs())
    await callback.answer()


@router.callback_query(F.data == 'team_2')
async def team_2(callback: CallbackQuery):
    content = Text(Bold(_('–ö–æ–Ω–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã –ê—Ä—Ç–µ–º–∞:\nhttps://t.me/SAXAR_GROUP_team_Artem')))
    await callback.message.answer(**content.as_kwargs())
    await callback.answer()


@router.callback_query(F.data == 'ru')
async def language_ru(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(GetLanguage.get_language)
    await i18n_middleware.set_locale(state=state, locale=callback.data)
    content = Text(Bold(_('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')))
    content2 = Text(Bold(_('–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω') + ' üá∑üá∫'))
    await callback.message.answer(**content2.as_kwargs(), reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(**content.as_kwargs(), reply_markup=start_kb())


@router.callback_query(F.data == 'en')
async def language_ru(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(GetLanguage.get_language)
    await i18n_middleware.set_locale(state=state, locale=callback.data)
    content = Text(Bold(_('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')))
    content2 = Text(Bold(_('–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω') + ' üá¨üáß'))
    await callback.message.answer(**content2.as_kwargs(), reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(**content.as_kwargs(), reply_markup=start_kb())

